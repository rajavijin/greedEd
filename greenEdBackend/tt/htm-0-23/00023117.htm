<div><details class="function"><summary><div><a class="source" href="source/lib/goog/iter/iter.js.src.html#l104">code &raquo;</a><code class="type">&lt;VALUE&gt;</code> <span class="member"><a name="goog.iter.toIterator">goog.iter.toIterator</a> <span class="args">( iterable )</span> &rArr; <code class="type">!<a href="class_goog_iter_Iterator.html">goog.iter.Iterator</a>.&lt;VALUE&gt;</code></span></div><p>Returns an iterator that knows how to iterate over the values in the object.</summary><div class="info"><table><tbody><tr><th>Parameters<tr><td><dl><dt>iterable: <code class="type">(<a href="class_goog_iter_Iterator.html">goog.iter.Iterator</a>.&lt;VALUE&gt;|<a href="namespace_goog_iter.html#goog.iter.Iterable">goog.iter.Iterable</a>)</code><dd>If the
     object is an iterator it will be returned as is.  If the object has an
     <code >__iterator__</code> method that will be called to get the value
     iterator.  If the object is an array-like object we create an iterator
     for that.</dl><tr><th>Returns<tr><td><dl>An iterator that knows how to iterate
     over the values in <code >iterable</code>.</dl></table></div></details></div></div><div class="wrap-details public"><div><details class="function"><summary><div><a class="source" href="source/lib/goog/iter/iter.js.src.html#l801">code &raquo;</a><code class="type">&lt;VALUE&gt;</code> <span class="member"><a name="goog.iter.zip">goog.iter.zip</a> <span class="args">( var_args )</span> &rArr; <code class="type">!<a href="class_goog_iter_Iterator.html">goog.iter.Iterator</a></code></span></div><p>Creates an iterator that returns arrays containing the ith elements from the
 provided iterables. The returned arrays will be the same size as the number
 of iterables given in <code >var_args</code>. Once the shortest iterable is
 exhausted, subsequent calls to <code >next()</code> will throw
 <code >goog.iter.StopIteration</code>.</summary><div class="info"><table><tbody><tr><th>Parameters<tr><td><dl><dt>var_args: <code class="type">...(!<a href="class_goog_iter_Iterator.html">goog.iter.Iterator</a>.&lt;VALUE&gt;|!<a href="namespace_goog_iter.html#goog.iter.Iterable">goog.iter.Iterable</a>)</code><dd>Any
     number of iterable objects.</dl><tr><th>Returns<tr><td><dl>A new iterator that returns
     arrays of elements from the provided iterables.</dl></table></div></details></div></div><div class="wrap-details public"><div><details class="function"><summary><div><a class="source" href="source/lib/goog/iter/iter.js.src.html#l833">code &raquo;</a><code class="type">&lt;VALUE&gt;</code> <span class="member"><a name="goog.iter.zipLongest">goog.iter.zipLongest</a> <span class="args">( fillValue, var_args )</span> &rArr; <code class="type">!<a href="class_goog_iter_Iterator.html">goog.iter.Iterator</a></code></span></div><p>Creates an iterator that returns arrays containing the ith elements from the
 provided iterables. The returned arrays will be the same size as the number
 of iterables given in <code >var_args</code>. Shorter iterables will be extended
 with <code >fillValue</code>. Once the longest iterable is exhausted, subsequent
 calls to <code >next()</code> will throw <code >goog.iter.StopIteration</code>.</summary><div class="info"><table><tbody><tr><th>Parameters<tr><td><dl><dt>fillValue: <code class="type">VALUE</code><dd>The object or value used to fill shorter iterables.<dt>var_args: <code class="type">...(!<a href="class_goog_iter_Iterator.html">goog.iter.Iterator</a>.&lt;VALUE&gt;|!<a href="namespace_goog_iter.html#goog.iter.Iterable">goog.iter.Iterable</a>)</code><dd>Any
     number of iterable objects.</dl><tr><th>Returns<tr><td><dl>A new iterator that returns
     arrays of elements from the provided iterables.</dl></table></div></details></div></div></section>