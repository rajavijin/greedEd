<div id="main-wrapper"><input type="checkbox" id="sidenav-toggle" /><main><header><h1>Class webdriver.WebDriver</h1><a class="source" href="source/lib/webdriver/webdriver.js.src.html#l77">code &raquo;</a></header><section><p>Creates a new WebDriver client, which provides control over a browser.

 Every WebDriver command returns a <code >webdriver.promise.Promise</code> that
 represents the result of that command. Callbacks may be registered on this
 object to manipulate the command result or catch an expected error. Any
 commands scheduled with a callback are considered sub-commands and will
 execute before the next command in the current frame. For example:
 <pre><code>
   var message = [];
   driver.call(message.push, message, 'a').then(function() {
     driver.call(message.push, message, 'b');
   });
   driver.call(message.push, message, 'c');
   driver.call(function() {
     alert('message is abc? ' + (message.join('') == 'abc'));
   });
 </code></pre><h2>Constructor</h2><div class="ctor wrap-details public"><div><div class="ctor"><span class="member">webdriver.WebDriver <span class="args">( session, executor, opt_flow )</span></span></div><div class="info"><table><tbody><tr><th>Parameters<tr><td><dl><dt>session: <code class="type">!(<a href="class_webdriver_Session.html">webdriver.Session</a>|<a href="class_webdriver_promise_Promise.html">webdriver.promise.Promise</a>)</code><dd>Either a
     known session or a promise that will be resolved to a session.<dt>executor: <code class="type">!<a href="interface_webdriver_CommandExecutor.html">webdriver.CommandExecutor</a></code><dd>The executor to use when
     sending commands to the browser.<dt>opt_flow: <code class="type"><a href="class_webdriver_promise_ControlFlow.html">webdriver.promise.ControlFlow</a>=</code><dd>The flow to
     schedule commands through. Defaults to the active flow object.</dl></table></div></div></div></section>