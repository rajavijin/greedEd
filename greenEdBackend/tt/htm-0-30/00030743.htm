<div id="main-wrapper"><input type="checkbox" id="sidenav-toggle" /><main><header><h1>Class goog.testing.PropertyReplacer</h1><a class="source" href="source/lib/goog/testing/propertyreplacer.js.src.html#l65">code &raquo;</a></header><section><p>Helper class for stubbing out variables and object properties for unit tests.
 This class can change the value of some variables before running the test
 cases, and to reset them in the tearDown phase.
 See googletest.StubOutForTesting as an analogy in Python:
 http://protobuf.googlecode.com/svn/trunk/python/stubout.py

 Example usage:
 <pre>var stubs = new goog.testing.PropertyReplacer();

 function setUp() {
   // Mock functions used in all test cases.
   stubs.set(Math, 'random', function() {
     return 4;  // Chosen by fair dice roll. Guaranteed to be random.
   });
 }

 function tearDown() {
   stubs.reset();
 }

 function testThreeDice() {
   // Mock a constant used only in this test case.
   stubs.set(goog.global, 'DICE_COUNT', 3);
   assertEquals(12, rollAllDice());
 }</pre>

 Constraints on altered objects:
 <ul>
   <li>DOM subclasses aren't supported.
   <li>The value of the objects' constructor property must either be equal to
       the real constructor or kept untouched.
 </ul><h2>Constructor</h2><div class="ctor wrap-details public"><div><div class="ctor"><span class="member">goog.testing.PropertyReplacer <span class="args">( )</span></span></div></div></div></section>