<div><a class="source" href="source/lib/webdriver/promise.js.src.html#l102">code &raquo;</a><span class="member"><a name="isPending">isPending</a> <span class="args">( )</span> &rArr; <code class="type"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean">boolean</a></code></span></div></summary><div class="info"><table><tbody><tr><th>Returns<tr><td><dl>Whether this promise's value is still being computed.</dl></table></div></details></div></div><div class="wrap-details public"><div><details class="function"><summary><div><a class="source" href="source/lib/webdriver/promise.js.src.html#l118">code &raquo;</a><code class="type">&lt;R&gt;</code> <span class="member"><a name="then">then</a> <span class="args">( opt_callback, opt_errback )</span> &rArr; <code class="type">!<a href="class_webdriver_promise_Promise.html">webdriver.promise.Promise</a>.&lt;R&gt;</code></span></div><p>Registers listeners for when this instance is resolved.</summary><div class="info"><table><tbody><tr><th>Parameters<tr><td><dl><dt>opt_callback: <code class="type">?(function(T): (R|<a href="class_webdriver_promise_Promise.html">webdriver.promise.Promise</a>.&lt;R&gt;))=</code><dd>The
     function to call if this promise is successfully resolved. The function
     should expect a single argument: the promise's resolved value.<dt>opt_errback: <code class="type">?(function(*): (R|<a href="class_webdriver_promise_Promise.html">webdriver.promise.Promise</a>.&lt;R&gt;))=</code><dd>The
     function to call if this promise is rejected. The function should expect
     a single argument: the rejection reason.</dl><tr><th>Returns<tr><td><dl>A new promise which will be
     resolved with the result of the invoked callback.</dl></table></div></details></div></div><div class="wrap-details public"><div><details class="function"><summary><div><a class="source" href="source/lib/webdriver/promise.js.src.html#l146">code &raquo;</a><code class="type">&lt;R&gt;</code> <span class="member"><a name="thenCatch">thenCatch</a> <span class="args">( errback )</span> &rArr; <code class="type">!<a href="class_webdriver_promise_Promise.html">webdriver.promise.Promise</a>.&lt;R&gt;</code></span></div><p>Registers a listener for when this promise is rejected. This is synonymous
 with the <code >catch</code> clause in a synchronous API:
 <pre><code>
   // Synchronous API:
   try {
     doSynchronousWork();
   } catch (ex) {
     console.error(ex);
   }

   // Asynchronous promise API:
   doAsynchronousWork().thenCatch(function(ex) {
     console.error(ex);
   });
 </code></pre></summary><div class="info"><table><tbody><tr><th>Parameters<tr><td><dl><dt>errback: <code class="type">function(*): (R|<a href="class_webdriver_promise_Promise.html">webdriver.promise.Promise</a>.&lt;R&gt;)</code><dd>The function
     to call if this promise is rejected. The function should expect a single
     argument: the rejection reason.</dl><tr><th>Returns<tr><td><dl>A new promise which will be
     resolved with the result of the invoked callback.</dl></table></div></details></div></div><div class="wrap-details public"><div><details class="function"><summary><div><a class="source" href="source/lib/webdriver/promise.js.src.html#l188">code &raquo;</a><code class="type">&lt;R&gt;</code> <span class="member"><a name="thenFinally">thenFinally</a> <span class="args">( callback )</span> &rArr; <code class="type">!<a href="class_webdriver_promise_Promise.html">webdriver.promise.Promise</a>.&lt;R&gt;</code></span></div><p>Registers a listener to invoke when this promise is resolved, regardless
 of whether the promise's value was successfully computed. This function
 is synonymous with the <code >finally</code> clause in a synchronous API:
 <pre><code>
   // Synchronous API:
   try {
     doSynchronousWork();
   } finally {
     cleanUp();
   }

   // Asynchronous promise API:
   doAsynchronousWork().thenFinally(cleanUp);
 </code></pre>

 <b>Note:</b> similar to the <code >finally</code> clause, if the registered
 callback returns a rejected promise or throws an error, it will silently
 replace the rejection error (if any) from this promise:
 <pre><code>
   try {
     throw Error('one');
   } finally {
     throw Error('two');  // Hides Error: one
   }

   webdriver.promise.rejected(Error('one'))
       .thenFinally(function() {
         throw Error('two');  // Hides Error: one
       });
 </code></pre></summary><div class="info"><table><tbody><tr><th>Parameters<tr><td><dl><dt>callback: <code class="type">function(): (R|<a href="class_webdriver_promise_Promise.html">webdriver.promise.Promise</a>.&lt;R&gt;)</code><dd>The function
     to call when this promise is resolved.</dl><tr><th>Returns<tr><td><dl>A promise that will be fulfilled
     with the callback result.</dl></table></div></details></div></div></section>