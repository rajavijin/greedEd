<div class="highlight"><pre><span class="nv">$hook</span><span class="p">[</span><span class="s1">&#39;pre_controller&#39;</span><span class="p">][]</span>
</pre></div>
</div>
<p>This permits you to have the same hook point with multiple scripts. The
order you define your array will be the execution order.</p>
</div>
<div class="section" id="hook-points">
<h2>Hook Points<a class="headerlink" href="#hook-points" title="Permalink to this headline">Â¶</a></h2>
<p>The following is a list of available hook points.</p>
<ul class="simple">
<li><strong>pre_system</strong>
Called very early during system execution. Only the benchmark and
hooks class have been loaded at this point. No routing or other
processes have happened.</li>
<li><strong>pre_controller</strong>
Called immediately prior to any of your controllers being called.
All base classes, routing, and security checks have been done.</li>
<li><strong>post_controller_constructor</strong>
Called immediately after your controller is instantiated, but prior
to any method calls happening.</li>
<li><strong>post_controller</strong>
Called immediately after your controller is fully executed.</li>
<li><strong>display_override</strong>
Overrides the <tt class="docutils literal"><span class="pre">_display()</span></tt> method, used to send the finalized page
to the web browser at the end of system execution. This permits you
to use your own display methodology. Note that you will need to
reference the CI superobject with <tt class="docutils literal"><span class="pre">$this-&gt;CI</span> <span class="pre">=&amp;</span> <span class="pre">get_instance()</span></tt> and
then the finalized data will be available by calling
<tt class="docutils literal"><span class="pre">$this-&gt;CI-&gt;output-&gt;get_output()</span></tt>.</li>
<li><strong>cache_override</strong>
Enables you to call your own method instead of the <tt class="docutils literal"><span class="pre">_display_cache()</span></tt>
method in the <a class="reference internal" href="../libraries/output.html"><em>Output Library</em></a>. This permits
you to use your own cache display mechanism.</li>
<li><strong>post_system</strong>
Called after the final rendered page is sent to the browser, at the
end of system execution after the finalized data is sent to the
browser.</li>
</ul>
</div>
</div>


          </div>
          <footer>
  
    <div class="rst-footer-buttons" role="navigation" aria-label="footer navigation">
      
        <a href="autoloader.html" class="btn btn-neutral float-right" title="Auto-loading Resources">Next <span class="fa fa-arrow-circle-right"></span></a>
      
      
        <a href="ancillary_classes.html" class="btn btn-neutral" title="Creating Ancillary Classes"><span class="fa fa-arrow-circle-left"></span> Previous</a>
      
    </div>
  

  <hr/>

  <div role="contentinfo">
    <p>
        &copy; Copyright 2014 - 2015, British Columbia Institute of Technology.
      Last updated on Apr 14, 2015.
    </p>
  </div>

  Built with <a href="http://sphinx-doc.org/">Sphinx</a> using a <a href="https://github.com/snide/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org">Read the Docs</a>.
  
</footer>
        </div>
      </div>

    </section>